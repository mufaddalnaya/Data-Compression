/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataCompressionAdaptiveHuffman;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

/**
 *
 * @author Mufaddal Naya
 */
public class TextCompression extends javax.swing.JFrame {

    /**
     * Creates new form Table
     */
    public TextCompression() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        savepath = new javax.swing.JTextField();
        input = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        txtpath = new javax.swing.JTextField();
        input1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Compression Adaptive Huffman v2.0.1");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(142, 210, 201));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(70, 32, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(252, 244, 217));
        jLabel1.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(252, 244, 217));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 10, 40));

        jLabel4.setBackground(new java.awt.Color(252, 244, 217));
        jLabel4.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(252, 244, 217));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 10, 40));

        jLabel3.setBackground(new java.awt.Color(252, 244, 217));
        jLabel3.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(142, 210, 201));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Compress");
        jLabel3.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel3FocusGained(evt);
            }
        });
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel3MouseEntered(evt);
            }
        });
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 213, 40));

        jLabel5.setBackground(new java.awt.Color(252, 244, 217));
        jLabel5.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(142, 210, 201));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Decompress");
        jLabel5.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 213, 40));

        jLabel11.setBackground(new java.awt.Color(142, 210, 201));
        jLabel11.setFont(new java.awt.Font("Minion Pro SmBd", 0, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(142, 210, 201));
        jLabel11.setText("Adaptive Huffman Encoding");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 200, 40));

        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/DataCompressionAdaptiveHuffman/Comp.png"))); // NOI18N
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 150, 150));

        jLabel13.setForeground(new java.awt.Color(142, 210, 201));
        jLabel13.setText("Data Compressor v2.0.1");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, -1, -1));

        jLabel18.setBackground(new java.awt.Color(252, 244, 217));
        jLabel18.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(142, 210, 201));
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Exit");
        jLabel18.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel18.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 213, 40));

        jLabel19.setBackground(new java.awt.Color(252, 244, 217));
        jLabel19.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(252, 244, 217));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 10, 40));

        jLabel20.setBackground(new java.awt.Color(142, 210, 201));
        jLabel20.setFont(new java.awt.Font("Minion Pro SmBd", 1, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(142, 210, 201));
        jLabel20.setText("Text Compression");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 190, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 30, -1, 481));

        jPanel3.setBackground(new java.awt.Color(0, 170, 160));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(142, 210, 201));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output File"));

        jSeparator1.setBackground(new java.awt.Color(70, 32, 102));
        jSeparator1.setForeground(new java.awt.Color(168, 219, 168));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Text:");

        savepath.setBackground(new java.awt.Color(142, 210, 201));
        savepath.setBorder(null);

        input.setText("Save");
        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addComponent(savepath, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input)
                    .addComponent(jLabel6)
                    .addComponent(savepath))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 550, -1));

        jPanel6.setBackground(new java.awt.Color(142, 210, 201));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Image"));

        jSeparator2.setBackground(new java.awt.Color(70, 32, 102));
        jSeparator2.setForeground(new java.awt.Color(168, 219, 168));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Text:");

        txtpath.setBackground(new java.awt.Color(142, 210, 201));
        txtpath.setBorder(null);

        input1.setText("Browse");
        input1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2)
                    .addComponent(txtpath, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(input1)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input1)
                    .addComponent(jLabel7)
                    .addComponent(txtpath))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 550, -1));

        jLabel2.setText("Successfully Encoded");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jLabel8.setText("% Reduction = ");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        jLabel9.setText(" Encoded  string cost =  bits");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        jButton1.setText("Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        jTextArea1.setBackground(new java.awt.Color(142, 210, 201));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 550, -1));

        jLabel10.setText("Original String cost = bits");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        jLabel14.setText("=======RESULT=======");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, -1, -1));

        jLabel15.setText("Successfully Decoded");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        jLabel16.setText("=======RESULT=======");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        jLabel17.setText("File Size = ");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(281, 30, 570, 481));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabel3FocusGained
           
    }//GEN-LAST:event_jLabel3FocusGained

    private void jLabel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseEntered
       
    }//GEN-LAST:event_jLabel3MouseEntered
    String log = "";
    public FileInputStream in = null;
    public BitByteOutputStream out = null;
    public void encode(Tree tree) {
	try {
            int c = 0;
            while((c = in.read()) != -1) {
                ArrayList<Boolean> buffer = new ArrayList<Boolean>();
		if (tree.contains(c)) {
                    int len = tree.getCode(c,true,buffer);
                    for(len=len-1 ;len>=0;len--)
			out.writeBit(buffer.get(len));
                    tree.insertInto((int)c);
		}
		else {
                    int len = tree.getCode(c, false,buffer);
                    for(len=len-1 ;len>=0;len--)
			out.writeBit(buffer.get(len));
                    out.writeByte(c);
                    tree.insertInto(c);
		}
            }
            out.flush();
	}
	catch (IOException e) {
            System.err.println("Error reading from input");
            e.printStackTrace();
	}
	finally {
            if(in != null) {
            try {
		in.close();
            } catch (IOException e) {
		e.printStackTrace();
            }
            }
            if(out != null) 
                out.close();
        }
    }
    void start(){
        log+="\n* Loading of the file to Encode...";
    	Tree tree = new Tree();
        String source = txtpath.getText();
        String destination = savepath.getText();
        try {
            in = new FileInputStream(source);
            out = new BitByteOutputStream(new FileOutputStream(destination));
	} catch (FileNotFoundException e) {
            e.printStackTrace();
	}
    	File in = new File(source);
    	long t = System.nanoTime();
    	encode(tree);
    	long at = System.nanoTime();
        jLabel10.setText("Original String cost = "+in.length()*8+" bits");
    	File out = new File(destination);
        jLabel9.setText(" Encoded  string cost = "+out.length()*8+" bits");
        jLabel8.setText(" % Reduction = "+((float)out.length()/(float)in.length()));
    	log += "Finished compression of: "+in.getName()+" in "+(float)(at-t)/1000000+" ms\n";
    	log += "Original size: "+in.length()+" bytes\n";
    	log += "Compressed size: "+out.length()+" bytes\n";
    	log += "Compression ratio: " + ((float)in.length()/(float)out.length())+"\n";
        log+="\nDONE";
    }
    
    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        jTextArea1.setText("");
        jTextArea1.setVisible(false);
        jButton1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        String org = txtpath.getText();
        log+=("----- Adaptive Huffman Encoding has STARTED -----");
        if(org.equals("")) {
           log=("Error:\nPlease select an image file to be compressed..");
           jTextArea1.setVisible(true);
        } 
        else {
            try {
                start();
                String h=jTextArea1.getText();
                h+="\n----- Encoding DONE -----";
                log+=(h);
                jButton1.setVisible(true);
                jLabel2.setVisible(true);
                jLabel6.setVisible(true);
                jLabel8.setVisible(true);
                jLabel9.setVisible(true);
                jLabel10.setVisible(true);
            }catch(Exception e) {
                log=("Error\n:"+e.getMessage());
                jTextArea1.setVisible(true);
            }
        }     
    }//GEN-LAST:event_jLabel3MouseClicked

    private void input1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_input1ActionPerformed
        jTextArea1.setVisible(false);
        jButton1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        txtpath.setText(fileName);
    }//GEN-LAST:event_input1ActionPerformed

    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        savepath.setText(fileName);
    }//GEN-LAST:event_inputActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jTextArea1.setVisible(false);
        jButton1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        jTextArea1.setVisible(true);
        jTextArea1.setText(log);
        log="";
    }//GEN-LAST:event_jButton1ActionPerformed

    //Decompression
    private BitInputStream inDest = null;
    private FileOutputStream outDest = null;
    public void decode(Tree tree) {
        try {			
            int c = 0;		
            if(tree.isEmpty()) { // Just write out first byte.
                int bitBuffer = 0;
                for(int i = 0; i<8;i++) {
                    c = inDest.read();
                    bitBuffer |= c;
                    if(i!=7) bitBuffer <<= 1;
		}
		outDest.write(bitBuffer);
		tree.insertInto(bitBuffer);
            }
            Node node = tree.root;
            while((c = inDest.read()) != -1) {
		if(c == 1) node = node.right;
		if(c == 0) node = node.left;				
                int value = 0;
		if(node.isNYT()) {
                    value = readByte(inDest); 
                    outDest.write(value);
                    tree.insertInto(value);
                    node = tree.root;
		}
                if(node.isLeaf()) {
                    value = node.getValue();
                    outDest.write(value);
                    tree.insertInto(value);
                    node = tree.root;
                }	
            }
        }
        catch (IOException e) {
            System.err.println("Error reading bytes");
            e.printStackTrace();
	}
	finally {
            if(inDest != null) {
            try {
		inDest.close();
            } catch (IOException e) {
		e.printStackTrace();
            }
            }
            if(outDest != null) {
                try {
                    outDest.close();
		} catch (IOException e) {
                    e.printStackTrace();
		}
            }
        }
    }
    void decompress(){
        String source = txtpath.getText();
        String destination = savepath.getText();
        log+="\n* Loading of the file to Decode...";
    	File in = new File(source);
        log+="\nDONE";
	log+="\nSize of File = "+in.length()+"bytes.";
        log+="\nDecoding the Compressed text...";
        try {
            inDest = new BitInputStream(new FileInputStream(source));
            outDest = new FileOutputStream(destination);
	} catch (FileNotFoundException e) {
            e.printStackTrace();
	}
    	Tree tree = new Tree();
    	decode(tree);
        File out = new File(destination);
        log += "Finished decompression of: "+in.getName()+"\n";
    	log += "Original size: "+in.length()+" bytes\n";
    	log += "Uncompressed size: "+out.length()+" bytes\n";
        jLabel17.setText("File Size = "+out.length()+" bytes");
    	log += "Compression ratio: "+((float)out.length()/(float)in.length())+"\n";
        log+="\nFile Decoded";
        log+="\nSaving File...";
        log+="done...";
    }
    private int readByte(BitInputStream in) throws IOException {
		int bitBuffer = 0;
		int c;
		for(int i = 0; i<8;i++) {
			c = in.read();
			bitBuffer |= c;
			if(i!=7) bitBuffer <<= 1;
			
		}
		return bitBuffer;
	}
    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea1.setVisible(false);
        jButton1.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        log+=("----- Huffman Decoding has STARTED -----\n");
        decompress();
        log+="\n----- Encoding DONE -----\nFile Saved...\n";
        jButton1.setVisible(true);
        jLabel14.setVisible(true);
        jLabel15.setVisible(true);
        jLabel17.setVisible(true);
        jButton1.setVisible(true);
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel18MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.out.println(""+ex);
        } 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextCompression().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton input;
    private javax.swing.JButton input1;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField savepath;
    private javax.swing.JTextField txtpath;
    // End of variables declaration//GEN-END:variables
}
