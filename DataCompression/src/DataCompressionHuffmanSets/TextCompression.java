/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package DataCompressionHuffmanSets;

import java.awt.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author Mufaddal Naya
 */
public class TextCompression extends javax.swing.JFrame {

    /**
     * Creates new form Table
     */
    public TextCompression() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("..\\SourceImages\\logo.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        compress = new javax.swing.JLabel();
        decompress = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        icon = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        close = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        savepath = new javax.swing.JTextField();
        save = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        txtpath = new javax.swing.JTextField();
        browse = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        details = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Text Compression v1.0.1");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(142, 210, 201));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(70, 32, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(252, 244, 217));
        jLabel1.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(252, 244, 217));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 10, 40));

        jLabel4.setBackground(new java.awt.Color(252, 244, 217));
        jLabel4.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(252, 244, 217));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 10, 40));

        compress.setBackground(new java.awt.Color(252, 244, 217));
        compress.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        compress.setForeground(new java.awt.Color(142, 210, 201));
        compress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        compress.setText("Compress");
        compress.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        compress.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        compress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compressMouseClicked(evt);
            }
        });
        jPanel2.add(compress, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 213, 40));

        decompress.setBackground(new java.awt.Color(252, 244, 217));
        decompress.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        decompress.setForeground(new java.awt.Color(142, 210, 201));
        decompress.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        decompress.setText("Decompress");
        decompress.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        decompress.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        decompress.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                decompressMouseClicked(evt);
            }
        });
        jPanel2.add(decompress, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 213, 40));

        jLabel11.setBackground(new java.awt.Color(142, 210, 201));
        jLabel11.setFont(new java.awt.Font("Minion Pro SmBd", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(142, 210, 201));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Text Compression");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 190, 40));

        icon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SourceImages/Comp.png"))); // NOI18N
        jPanel2.add(icon, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 150, 150));

        jLabel13.setForeground(new java.awt.Color(142, 210, 201));
        jLabel13.setText("Data Compressor v1.0.1");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 440, -1, -1));

        close.setBackground(new java.awt.Color(252, 244, 217));
        close.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        close.setForeground(new java.awt.Color(142, 210, 201));
        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setText("Back");
        close.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        close.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeMouseClicked(evt);
            }
        });
        jPanel2.add(close, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 213, 40));

        jLabel19.setBackground(new java.awt.Color(252, 244, 217));
        jLabel19.setFont(new java.awt.Font("Lato", 0, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(252, 244, 217));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(142, 210, 201)));
        jLabel19.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 210, 10, 40));

        jLabel12.setBackground(new java.awt.Color(142, 210, 201));
        jLabel12.setFont(new java.awt.Font("Minion Pro SmBd", 0, 16)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(142, 210, 201));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Huffman Encoding Grouped");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 200, 40));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(41, 30, -1, 481));

        jPanel3.setBackground(new java.awt.Color(0, 170, 160));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(142, 210, 201));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Output File"));

        jSeparator1.setBackground(new java.awt.Color(70, 32, 102));
        jSeparator1.setForeground(new java.awt.Color(168, 219, 168));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setText("Text:");

        savepath.setBackground(new java.awt.Color(142, 210, 201));
        savepath.setBorder(null);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addComponent(savepath, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(save)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(save)
                    .addComponent(jLabel6)
                    .addComponent(savepath))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 550, -1));

        jPanel6.setBackground(new java.awt.Color(142, 210, 201));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Input Image"));

        jSeparator2.setBackground(new java.awt.Color(70, 32, 102));
        jSeparator2.setForeground(new java.awt.Color(168, 219, 168));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setText("Text:");

        txtpath.setBackground(new java.awt.Color(142, 210, 201));
        txtpath.setBorder(null);

        browse.setText("Browse");
        browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator2)
                    .addComponent(txtpath, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(browse)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browse)
                    .addComponent(jLabel7)
                    .addComponent(txtpath))
                .addContainerGap(16, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 550, -1));

        jLabel2.setText("Successfully Encoded");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, -1, -1));

        jLabel8.setText("% Reduction = ");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 300, -1, -1));

        jLabel9.setText(" Encoded  string cost =  bits");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        details.setText("Details");
        details.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsActionPerformed(evt);
            }
        });
        jPanel3.add(details, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 330, -1, -1));

        jTextArea1.setBackground(new java.awt.Color(142, 210, 201));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 370, 550, -1));

        jLabel10.setText("Original String cost = bits");
        jPanel3.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        jLabel14.setText("=======RESULT=======");
        jPanel3.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 260, -1, -1));

        jLabel15.setText("Successfully Decoded");
        jPanel3.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 240, -1, -1));

        jLabel16.setText("=======RESULT=======");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, -1, -1));

        jLabel17.setText("File Size = ");
        jPanel3.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(281, 30, 570, 481));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 540));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    //compression
    String log="";
    String decoded="";
    public void writeBinary(String str,String fname){
        try (FileOutputStream fos  = new FileOutputStream(new File(fname),false)) {
	int n=str.length();
        int mul = n-n%8;
        int start_index=0;	
        int end_index =8;
        while(end_index <= mul){
            byte binary = (byte)Integer.parseInt(str.substring(start_index, end_index),2);
            start_index=end_index;
            end_index+=8;
            fos.write(binary);
        }	
        byte binary = (byte)Integer.parseInt(str.substring(start_index, n),2);
        fos.write(binary);
        fos.close();		
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public void writeCodeTable(Huffman h,String fname){
        String path="";
        for(int i=fname.length()-1;i>=0;i--){
            if(fname.charAt(i) == '\\' ){
                path=fname.substring(0,i+1);
                break;
            }
        }
        path+="code_table.txt";
        File filename = new File(path);
        String wr="";
        boolean fl=true;
        try (BufferedWriter in = new BufferedWriter(new FileWriter(filename))){
            for (Map.Entry<String, String> entry: h.prefix.entrySet()){
                String key = entry.getKey();
                String val = entry.getValue();
                if(fl){
                    if(key.contains("\n")){
                        if(key.charAt(0)=='\n')
                            key = "\\"+key.charAt(1);
                        else
                            key = key.charAt(0)+"\\";
                    }
                    wr=(key + ": " + val);
                    fl=false;
                }
                else{
                    if(key.contains("\n")){
                        if(key.charAt(0)=='\n')
                            key = "\\"+key.charAt(1);
                        else
                            key = key.charAt(0)+"\\";
                    }
                    wr=("\n"+key + ": " + val);
                }
                in.write(wr); 
            }
        }
        catch (IOException e){
            System.out.println(e);
        }
    }
    public static String readFile(String fname){
	StringBuilder sb = new StringBuilder();
	File filename = new File(fname);
	try (BufferedReader in = new BufferedReader(new FileReader(filename))){
            String line = in.readLine();
            while (line != null){
                sb.append(line + "\n");
		line = in.readLine();
            }
	}
	catch (IOException e){
            System.out.println(e);
	}
	return sb.toString();
    }
    void testHuffman(String originalString){
        log+=jTextArea1.getText();
        log+="\n* Building Huffman Tree and Code Tables...";
	Huffman h = new Huffman(originalString);
	log+=("\n DONE");
	log+=("\n============= Word Frequency =============");
        for (Map.Entry<Character, Integer> entry: h.freq.entrySet()){
            String key = entry.getKey().toString();
            int val = entry.getValue();
            if (key.equals("\n"))
            	key = "\\n";
            log+=("\n"+key + " occurs " + val + " times");
        }
        log+=("\n========== Huffman Code for each character =============");
	for (Map.Entry<String, String> entry: h.prefix.entrySet()){
            String key = entry.getKey();
            String val = entry.getValue();
            if (key.equals("\n"))
		key = "\\n";
            log+=("\n"+key + ": " + val); 
	}
        log+=("\n* Encoding the text...");
	String encoded = h.encode();
        log+=("\nDone");
	/*decoded = h.decode();*/
        writeBinary(encoded,savepath.getText());
        writeCodeTable(h,savepath.getText());
        /*if(!originalString.equals(decoded)){    // Check if original text and decoded text is exactly same
            System.out.println("Failed to Encode, Encountered an Error");
	}*/
	double sl = originalString.length() * 8 ;
	double el = encoded.length();
	jLabel10.setText("Original string cost = " + (int)sl + " bits") ;
	jLabel9.setText("Encoded  string cost = " + (int)el + " bits") ;
	double r = ((el - sl)/sl) * 100 ;
	jLabel8.setText("% reduction = " + (-r)) ;
    }
    void start(){
        String originalFile = txtpath.getText();
        log+="\n* Loading of the file to Encode...";
	  String originalString = readFile(originalFile);
          log+="\nDONE";
	  log+="\nSize of File = "+originalString.length()+"bytes.";
          testHuffman(originalString);
    }
    
    private void compressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compressMouseClicked
        jTextArea1.setText("");
        jTextArea1.setVisible(false);
        details.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        String org = txtpath.getText();
        log+=("----- Huffman Encoding has STARTED -----");
        if(org.equals("")) {
           log=("Error:\nPlease select an image file to be compressed..");
           jTextArea1.setVisible(true);
        } 
        else {
            try {
                start();
                String h=jTextArea1.getText();
                h+="\n----- Encoding DONE -----";
                log+=(h);
                details.setVisible(true);
                jLabel2.setVisible(true);
                jLabel6.setVisible(true);
                jLabel8.setVisible(true);
                jLabel9.setVisible(true);
                jLabel10.setVisible(true);
            }catch(Exception e) {
                log=("Error\n:"+e.getMessage());
                jTextArea1.setVisible(true);
            }
        }     
    }//GEN-LAST:event_compressMouseClicked

    private void browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseActionPerformed
        jTextArea1.setVisible(false);
        details.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        txtpath.setText(fileName);
    }//GEN-LAST:event_browseActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File f = chooser.getSelectedFile();
        String fileName = f.getAbsolutePath();
        savepath.setText(fileName);
    }//GEN-LAST:event_saveActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        jTextArea1.setVisible(false);
        details.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.out.println(""+ex);
        } 
    }//GEN-LAST:event_formWindowOpened

    private void detailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsActionPerformed
        // TODO add your handling code here:
        jTextArea1.setVisible(true);
        jTextArea1.setText(log);
        log="";
    }//GEN-LAST:event_detailsActionPerformed

    //Decompression
    HashMap<String, String> code_table ;
    void getCodeTable(String path){
        code_table = new HashMap<>();
	File filename = new File(path);
	try (BufferedReader in = new BufferedReader(new FileReader(filename))){
            String line = in.readLine();
            while (line != null){
                String[] pair = line.split(": ");
                String value = pair[0];
		String huffman_code = pair[1];
                if(value.contains("\\")){
                    if(value.charAt(0)=='\\')
                            value = "\n"+value.charAt(1);
                        else
                            value = value.charAt(0)+"\n";
                }
                code_table.put(huffman_code, value);
		line = in.readLine();
            }
	}
	catch (IOException e){
            System.out.println(e);
	}
    }
    public String decode(String encoded){
        String h="";
	StringBuilder sb = new StringBuilder();
	String t = "";
	for(int i=0; i<encoded.length(); i++){
            t += encoded.charAt(i);
            if (code_table.containsKey(t)){
                String ch=code_table.get(t);
                char st = encoded.charAt(++i);
                if(st=='0')
                    sb.append(ch.charAt(0));
		else
                    sb.append(ch.charAt(1));
		t = "";
            }
	}
	h = sb.toString();
	return h;
	}
    String readBinary(String path){
        String f="";
        StringBuilder binary_str = new StringBuilder("");
	try(InputStream inputStream = new FileInputStream(path)){
            int byteRead;
            while ((byteRead = inputStream.read()) != -1) { 
                String binar = Integer.toBinaryString(byteRead);
                if(binar.length()!=8){
                    int extra_len = 8-binar.length();
                    String padding_bits ="";
                    while(extra_len>0){
			padding_bits+="0";
			extra_len--;
                    }
                binar=padding_bits+binar;
                }
		binary_str.append(binar);
            }
            int n=binary_str.length();
            f=binary_str.substring(0,n-8);
            String k=binary_str.substring(n-8, n);
            int j=0;
            for(j=0;j<8;j++){
                if(k.charAt(j)=='1')break;
            }
            k=k.substring(j, 8);
            f=f+k;
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return f;
    }
    void writeFile(String s,String path ){
        File filename = new File(path);
        try (BufferedWriter in = new BufferedWriter(new FileWriter(filename))){
            in.write(s); 
        }
        catch (IOException e){
            System.out.println(e);
        } 
    }
    void decompress(){
        String path=txtpath.getText();
        log+="\n* Loading of the file to Decode...";
        String compressedText = readBinary(path);
        log+="\nDONE";
	log+="\nSize of File = "+compressedText.length()+"bytes.";
        for(int i=path.length()-1;i>=0;i--){
            if(path.charAt(i) == '\\' ){
                path=path.substring(0,i+1);
                break;
            }
        }
        path+="code_table.txt";
        log+="\nGetting the code table and prefix code...";
        getCodeTable(path);
        log+="\nDone...";
        log+="\nDecoding the Compressed text...";
        String decod = decode(compressedText);
        jLabel17.setText("Decoded File Size = "+decod.length()+"bits");
        log+="\nFile Decoded";
        log+="\nSaving File...";
        String t=savepath.getText();
        writeFile(decod, t);
        log+="done...";
    }
    private void decompressMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_decompressMouseClicked
        // TODO add your handling code here:
        jTextArea1.setText("");
        jTextArea1.setVisible(false);
        details.setVisible(false);
        jLabel2.setVisible(false);
        jLabel8.setVisible(false);
        jLabel9.setVisible(false);
        jLabel10.setVisible(false);
        jLabel14.setVisible(false);
        jLabel15.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
        jLabel17.setVisible(false);
        log+=("----- Huffman Decoding has STARTED -----");
        decompress();
        log+="\n----- Encoding DONE -----\nFile Saved...";
        details.setVisible(true);
        jLabel14.setVisible(true);
        jLabel15.setVisible(true);
        jLabel17.setVisible(true);
        details.setVisible(true);
    }//GEN-LAST:event_decompressMouseClicked

    private void closeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseClicked
        this.setVisible(false);
        new Main.Main().setVisible(true);
    }//GEN-LAST:event_closeMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception ex) {
            System.out.println(""+ex);
        } 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextCompression().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton browse;
    private javax.swing.JLabel close;
    private javax.swing.JLabel compress;
    private javax.swing.JLabel decompress;
    private javax.swing.JButton details;
    private javax.swing.JLabel icon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton save;
    private javax.swing.JTextField savepath;
    private javax.swing.JTextField txtpath;
    // End of variables declaration//GEN-END:variables
}
